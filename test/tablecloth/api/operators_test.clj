(ns tablecloth.api.operators-test
  (:require [tablecloth.api :as api]
            [tablecloth.api.operators :as op]
            [midje.sweet :refer [facts fact =>]]))

(def data (vec (repeatedly 100 (fn [] {:a (- (rand) 0.5)
                                      :b (- (rand) 0.5)}))))
(def ds (api/dataset data))

(facts "no operator should return exceptions and that is enough for now"
  (fact (some? (api/* (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/+ (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/- (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api// (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/< (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/<= (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/> (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/>= (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/= (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/abs (api/column ds :a))) => true)
  (fact (some? (api/acos (api/column ds :a))) => true)
  (fact (some? (api/and (api/column ds :a) (api/column ds :a))) => true)
  (fact (some? (api/asin (api/column ds :a))) => true)
  (fact (some? (api/atan (api/column ds :a))) => true)
  (fact (some? (api/atan2 (api/column ds :a) (api/column ds :b))) => true)
  ;; (fact (some? (api/bit-and (api/column ds :a) (api/column ds :b))))
  ;; (fact (some? (api/bit-and-not (api/column ds :a) (api/column ds :b))))
  ;; (fact (some? (api/bit-clear (api/column ds :a) (api/column ds :b))))
  ;; (fact (some? (api/bit-flip (api/column ds :a))))
  ;; (fact (some? (api/bit-not (api/column ds :a))))
  ;; (fact (some? (api/bit-or (api/column ds :a))))
  ;; (fact (some? (api/bit-set (api/column ds :a))))
  ;; (fact (some? (api/bit-shift-left (api/column ds :a))))
  ;; (fact (some? (api/bit-shift-right (api/column ds :a))))
  ;; (fact (some? (api/bit-test (api/column ds :a))))
  ;; (fact (some? (api/bit-xor (api/column ds :a))))
  (fact (some? (api/cbrt (api/column ds :a))) => true)
  (fact (some? (api/ceil (api/column ds :a))) => true)
  (fact (some? (api/cos (api/column ds :a))) => true)
  (fact (some? (api/cosh (api/column ds :a))) => true)
  (fact (some? (api/cummax (api/column ds :a))) => true)
  (fact (some? (api/cummin (api/column ds :a))) => true)
  (fact (some? (api/cumprod (api/column ds :a))) => true)
  (fact (some? (api/cumsum (api/column ds :a))) => true)
  (fact (some? (api/descriptive-statistics (api/column ds :a))) => true)
  (fact (some? (api/emin (api/column ds :a))) => true)
  (fact (some? (api/emax (api/column ds :a))) => true)
  (fact (some? (api/eq (api/column ds :a) (api/column ds :b))) => true)
  ;; (fact (some? (api/even? (api/dataset {:a [1 2 3 4]}))) => true)
  (fact (some? (api/exp (api/column ds :a))) => true)
  (fact (some? (api/expm1 (api/column ds :a))) => true)
  (fact (some? (api/finite? (api/column ds :a))) => true)
  (fact (some? (api/floor (api/column ds :a))) => true)
  (fact (some? (api/get-significand (api/column ds :a))) => true)
  (fact (some? (api/hypot (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/identity (api/column ds :a))) => true)
  (fact (some? (api/ieee-remainder (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/infinite? (api/column ds :a))) => true)
  (fact (some? (api/kendalls-correlation (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/kurtosis (api/column ds :a))) => true)
  (fact (some? (api/log (api/column ds :a))) => true)
  (fact (some? (api/log10 (api/column ds :a))) => true)
  (fact (some? (api/log1p (api/column ds :a))) => true)
  (fact (some? (api/logistic (api/column ds :a))) => true)
  (fact (some? (api/mathematical-integer? (api/column ds :a))) => true)
  (fact (some? (api/max (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/mean (api/column ds :a))) => true)
  (fact (some? (api/median (api/column ds :a))) => true)
  (fact (some? (api/min (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/nan? (api/column ds :a))) => true)
  (fact (some? (api/neg? (api/column ds :a))) => true)
  (fact (some? (api/next-down (api/column ds :a))) => true)
  (fact (some? (api/next-up (api/column ds :a))) => true)
  (fact (some? (api/not (api/column ds :a))) => true)
  (fact (some? (api/not= (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/not-eq (api/column ds :a) (api/column ds :b))) => true)
  ;; (fact (some? (api/odd? (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/or (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/pearsons-correlation (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/percentiles (api/abs (api/* 100 (api/column ds :a))) (api/column ds :b))) => true)
  (fact (some? (api/pos? (api/column ds :a))) => true)
  (fact (some? (api/pow (api/column ds :a) 2.0)) => true)
  (fact (some? (api/quartile-1 (api/column ds :a))) => true)
  (fact (some? (api/quartile-3 (api/column ds :a))) => true)
  ;; (fact (some? (api/quartile-outlier-fn (api/column ds :a))))
  (fact (some? (api/quartiles (api/column ds :a))) => true)
  (fact (some? (api/quot (api/column ds :a) 0.01)) => true)
  (fact (some? (api/rem (api/column ds :a) 0.01)) => true)
  (fact (some? (api/rint (api/column ds :a))) => true)
  (fact (some? (api/round (api/column ds :a))) => true)
  (fact (some? (api/signum (api/column ds :a))) => true)
  (fact (some? (api/sin (api/column ds :a))) => true)
  (fact (some? (api/sinh (api/column ds :a))) => true)
  (fact (some? (api/skew (api/column ds :a))) => true)
  (fact (some? (api/spearmans-correlation (api/column ds :a) (api/column ds :b))) => true)
  (fact (some? (api/sq (api/column ds :a))) => true)
  (fact (some? (api/sqrt (api/column ds :a))) => true)
  (fact (some? (api/standard-deviation (api/column ds :a))) => true)
  (fact (some? (api/sum (api/column ds :a))) => true)
  (fact (some? (api/tan (api/column ds :a))) => true)
  (fact (some? (api/tanh (api/column ds :a))) => true)
  (fact (some? (api/to-degrees (api/column ds :a))) => true)
  (fact (some? (api/to-radians (api/column ds :a))) => true)
  (fact (some? (api/ulp (api/column ds :a))) => true)
  ;; (fact (some? (api/unsigned-bit-shift-right (api/column ds :a))))
  (fact (some? (api/variance (api/column ds :a))) => true)
  (fact (some? (api/zero? (api/column ds :a))) => true))
