; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Connecting ...
; Reading port file: file:///mnt/extHDD/sources/tablecloth/.nrepl-port ...
; Using host:port localhost:41053 ...
; Hooking up nREPL sessions ...
; nREPL connection failed: AggregateError
; Failed connecting.
; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /mnt/extHDD/sources/tablecloth; clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.3.1"},cider/cider-nrepl {:mvn/version,"0.52.1"}}}' -M:test -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]")
; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /mnt/extHDD/sources/tablecloth; clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.3.1"},cider/cider-nrepl {:mvn/version,"0.52.1"}}}' -M:test -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]")
; Using host:port localhost:33503 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉tablecloth.api.columns-test꞉> 
#'tablecloth.api.columns-test/dss
clj꞉tablecloth.api.columns-test꞉> 
; Execution error (ClassCastException) at tech.v3.dataset.base/update-column (base.clj:176).
; class tech.v3.dataset.impl.column.Column cannot be cast to class java.lang.Number (tech.v3.dataset.impl.column.Column is in unnamed module of loader clojure.lang.DynamicClassLoader @4be0f0e2; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉tablecloth.api.columns-test꞉> 
_unnamed [9 5]:

| :idx | :a | z | :b | :c |
|-----:|----|--:|---:|---:|
|    1 |  a | 1 |  2 |  3 |
|    1 |  b | 1 |  3 |  1 |
|    1 |  c | 1 |  4 |  2 |
|    2 |  a | 1 |  3 |  4 |
|    2 |  b | 1 |  4 |  2 |
|    2 |  c | 1 |  5 |  1 |
|    3 |  a | 1 |  4 |  3 |
|    3 |  b | 1 |  3 |  2 |
|    3 |  c | 1 |  2 |  4 |

clj꞉tablecloth.api.columns-test꞉> 
_unnamed [9 5]:

| :idx | :a | z | :b | :c |
|-----:|---:|--:|---:|---:|
|    1 |  1 | 1 |  2 |  3 |
|    1 |  1 | 1 |  3 |  1 |
|    1 |  1 | 1 |  4 |  2 |
|    2 |  1 | 1 |  3 |  4 |
|    2 |  1 | 1 |  4 |  2 |
|    2 |  1 | 1 |  5 |  1 |
|    3 |  1 | 1 |  4 |  3 |
|    3 |  1 | 1 |  3 |  2 |
|    3 |  1 | 1 |  2 |  4 |

clj꞉tablecloth.api.columns-test꞉> 
_unnamed [9 5]:

| :idx | :a | z | :b | :c |
|-----:|---:|--:|---:|---:|
|    1 |  1 | 1 |  1 |  3 |
|    1 |  1 | 1 |  2 |  1 |
|    1 |  1 | 1 |  3 |  2 |
|    2 |  1 | 1 |  2 |  4 |
|    2 |  1 | 1 |  3 |  2 |
|    2 |  1 | 1 |  4 |  1 |
|    3 |  1 | 1 |  3 |  3 |
|    3 |  1 | 1 |  2 |  2 |
|    3 |  1 | 1 |  1 |  4 |

clj꞉tablecloth.api.columns-test꞉> 
#'tablecloth.api/update-columns
clj꞉tablecloth.api꞉> 
[[1 2] [1 3] [1 4] [1 3] [1 4] [1 5] [1 4] [1 3] [1 2]]
clj꞉tablecloth.api.columns-test꞉> 
[{:a 1, :b 2} {:a 1, :b 3} {:a 1, :b 4} {:a 1, :b 3} {:a 1, :b 4} {:a 1, :b 5} {:a 1, :b 4} {:a 1, :b 3} {:a 1, :b 2}]
clj꞉tablecloth.api.columns-test꞉> 
[{:a 1, :b 2} {:a 1, :b 3} {:a 1, :b 4} {:a 1, :b 3} {:a 1, :b 4} {:a 1, :b 5} {:a 1, :b 4} {:a 1, :b 3} {:a 1, :b 2}]
clj꞉tablecloth.api.columns-test꞉> 
#tech.v3.dataset.column<int32>[9]
:a
[1, 1, 1, 1, 1, 1, 1, 1, 1]
clj꞉tablecloth.api.columns-test꞉> 
(1 1 1 1 1 1 1 1 1)
clj꞉tablecloth.api.columns-test꞉> 
(1 1 1 1 1 1 1 1 1)
clj꞉tablecloth.api.columns-test꞉> 
true
clj꞉tablecloth.api.columns-test꞉> 
true
clj꞉tablecloth.api.columns-test꞉> 
